[
    {
        "name": "Chemistry Types",
        "classes": [],
        "inherits": "",
        "is": "",
        "definition": "ChemTypes",
        "uses": [],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": [
                "ElementT = \\{ H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn, Fr, Ra, Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr, Rf, Db, Sg, Bh, Hs, Mt, Ds, Rg, Cn, Nh, Fl, Mc, Lv, Ts, Og \\}"
            ],
            "accessPrograms": []
        },
        "semantics": {
            "stateVariables": [],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": []
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "Chemistry Interface",
        "classes": ["Interface"],
        "inherits": "",
        "is": "",
        "definition": "ChemEntity",
        "uses": ["ChemTypes", "ElmSet"],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": [],
            "accessPrograms": [
                {
                    "name": "num\\_atoms",
                    "in": "ElementT",
                    "out": "$\\mathbb{N}$",
                    "exceptions": ""
                },
                {
                    "name": "constit\\_elems",
                    "in": "",
                    "out": "ElmSet",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": []
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "Equality Interface",
        "classes": ["Interface", "Generic"],
        "inherits": "",
        "is": "",
        "definition": "Equality(T)",
        "uses": [],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": [],
            "accessPrograms": [
                {
                    "name": "equals",
                    "in": "T",
                    "out": "$\\mathbb{B}$",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": []
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "Generic Set",
        "classes": ["Template", "Generic"],
        "inherits": "Equality(Set(T))",
        "is": "",
        "definition": "Set(T with Equality(T))",
        "uses": ["Equality"],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": ["Set(T) = ?"],
            "accessPrograms": [
                {
                    "name": "new Set",
                    "in": "seq of T",
                    "out": "Set(T)",
                    "exceptions": ""
                },
                {
                    "name": "add",
                    "in": "T",
                    "out": "",
                    "exceptions": ""
                },
                {
                    "name": "rm",
                    "in": "T",
                    "out": "",
                    "exceptions": "ValueError"
                },
                {
                    "name": "member",
                    "in": "T",
                    "out": "$\\mathbb{B}$",
                    "exceptions": ""
                },
                {
                    "name": "size",
                    "in": "",
                    "out": "$\\mathbb{N}$",
                    "exceptions": ""
                },
                {
                    "name": "to\\_seq",
                    "in": "",
                    "out": "seq of T",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [
                {
                    "identifier": "$S$",
                    "text": "set of T"
                }
            ],
            "stateInvariants": [],
            "assumptions": ["The Set(T) constructor is called for each object instance before any other access routine is called for that object.  The constructor can only be called once."],
            "accessRoutines": [
                {
                    "name": "new Set(s)",
                    "transition": "S := {e:T|e\\in s:e}",
                    "output": "out := self",
                    "exception": "none"
                },
                {
                    "name": "add(e)",
                    "transition": "S := S\\cup {e}",
                    "output": "",
                    "exception": "none"
                },
                {
                    "name": "rm(e)",
                    "transition": "S := S - {e}",
                    "output": "",
                    "exception": "e\\notin S\\Rightarrow \\text{ValueError}"
                },
                {
                    "name": "member(e)",
                    "transition": "",
                    "output": "e\\in S",
                    "exception": "none"
                },
                {
                    "name": "size()",
                    "transition": "",
                    "output": "out := |S|",
                    "exception": "none"
                },
                {
                    "name": "equals(R)",
                    "transition": "",
                    "output": "out := (\\forall e:T|e\\in S:R.\\text{member}(e))\\land (R.\\text{size}()=|S|)",
                    "exception": "none"
                },
                {
                    "name": "to\\_seq()",
                    "transition": "",
                    "output": "out := \\langle e:T|e\\in S:e\\rangle",
                    "exception": "none"
                }
            ]
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "ElementSet",
        "classes": ["Template"],
        "inherits": "",
        "is": "Set(ElementT)",
        "definition": "ElmSet is Set(ElementT)",
        "uses": [],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": [],
            "accessPrograms": []
        },
        "semantics": {
            "stateVariables": [],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": []
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "MoleculeSet",
        "classes": ["Template"],
        "inherits": "",
        "is": "Set(MoleculeT)",
        "definition": "MolecSet is Set(MoleculeT)",
        "uses": [],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": [],
            "accessPrograms": []
        },
        "semantics": {
            "stateVariables": [],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": []
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "MoleculeT",
        "classes": ["Template"],
        "inherits": "ChemEntity, Equality(MoleculeT)",
        "is": "",
        "definition": "MoleculeT",
        "uses": ["ChemTypes", "ChemEntity", "Equality", "ElmSet"],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": ["MoleculeT = ?"],
            "accessPrograms": [
                {
                    "name": "new MoleculeT",
                    "in": "$\\mathbb{N}$, ElementT",
                    "out": "MoleculeT",
                    "exceptions": ""
                },
                {
                    "name": "get\\_elm",
                    "in": "",
                    "out": "ElementT",
                    "exceptions": ""
                },
                {
                    "name": "get\\_num",
                    "in": "",
                    "out": "$\\mathbb{N}$",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [
                {
                    "identifier": "$num$",
                    "text": "elm"
                },
                {
                    "identifier": "$elm$",
                    "text": "ElementT"
                }
            ],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": [
                {
                    "name": "new MoleculeT(n, e)",
                    "transition": "num, elm := n, e",
                    "output": "out := self",
                    "exception": "none"
                },
                {
                    "name": "get\\_num()",
                    "transition": "",
                    "output": "out := num",
                    "exception": "none"
                },
                {
                    "name": "get\\_elm()",
                    "transition": "",
                    "output": "out := elm",
                    "exception": "none"
                },
                {
                    "name": "num\\_atoms(e)",
                    "transition": "",
                    "output": "out := (e=elm\\Rightarrow num|e\\neq elm\\Rightarrow 0)",
                    "exception": "none"
                },
                {
                    "name": "constit\\_elems()",
                    "transition": "",
                    "output": "out := \\text{ElmSet}\\langle elm\\rangle",
                    "exception": "none"
                },
                {
                    "name": "equals(m)",
                    "transition": "",
                    "output": "out := (elm=m.\\text{get\\_elm}())\\land (num=m.\\text{get\\_num}())",
                    "exception": "none"
                }
            ]
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "CompoundT",
        "classes": ["Template"],
        "inherits": "ChemEntity, Equality(CompoundT)",
        "is": "",
        "definition": "CompoundT",
        "uses": ["MoleculeT", "ChemEntity", "Equality", "ElmSet", "MolecSet"],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": ["CompoundT = ?"],
            "accessPrograms": [
                {
                    "name": "new CompoundT",
                    "in": "MolecSet",
                    "out": "CompoundT",
                    "exceptions": ""
                },
                {
                    "name": "get\\_molec\\_set",
                    "in": "",
                    "out": "MolecSet",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [
                {
                    "identifier": "$C$",
                    "text": "MolecSet"
                }
            ],
            "stateInvariants": [],
            "assumptions": [],
            "accessRoutines": [
                {
                    "name": "new CompoundT(M)",
                    "transition": "C := M",
                    "output": "out := self",
                    "exception": "none"
                },
                {
                    "name": "get\\_molec\\_set()",
                    "transition": "",
                    "output": "out := C",
                    "exception": "none"
                },
                {
                    "name": "num\\_atoms(e)",
                    "transition": "",
                    "output": "out := (+m:\\text{MoleculeT}|m\\in C.\\text{to\\_seq}():m.\\text{num\\_atoms}(e))",
                    "exception": "none"
                },
                {
                    "name": "constit\\_elems()",
                    "transition": "",
                    "output": "out := \\text{ElmSet}(\\langle m:\\text{MoleculeT}|m\\in C.\\text{to\\_seq}():m.\\text{get\\_elm}()\\rangle)",
                    "exception": "none"
                },
                {
                    "name": "equals(D)",
                    "transition": "",
                    "output": "out := C.\\text{equals}(D.\\text{get\\_molec\\_set}())",
                    "exception": "none"
                }
            ]
        },
        "localFunctions": [],
        "considerations": ""
    },
    {
        "name": "ReactionT",
        "classes": ["Template"],
        "inherits": "",
        "is": "",
        "definition": "ReactionT",
        "uses": ["ChemTypes", "CompoundT"],
        "syntax": {
            "exportedConstants": [],
            "exportedTypes": ["ReactionT = ?"],
            "accessPrograms": [
                {
                    "name": "new ReactionT",
                    "in": "seq of CompoundT, seq of CompoundT",
                    "out": "ReactionT",
                    "exceptions": "ValueError"
                },
                {
                    "name": "get\\_lhs",
                    "in": "",
                    "out": "seq of CompoundT",
                    "exceptions": ""
                },
                {
                    "name": "get\\_rhs",
                    "in": "",
                    "out": "seq of CompoundT",
                    "exceptions": ""
                },
                {
                    "name": "get\\_lhs\\_coeff",
                    "in": "",
                    "out": "seq of $\\mathbb{R}$",
                    "exceptions": ""
                },
                {
                    "name": "get\\_rhs\\_coeff",
                    "in": "",
                    "out": "seq of $\\mathbb{R}$",
                    "exceptions": ""
                }
            ]
        },
        "semantics": {
            "stateVariables": [
                {
                    "identifier": "$lhs$",
                    "text": "seq of CompoundT"
                },
                {
                    "identifier": "$rhs$",
                    "text": "seq of CompoundT"
                },
                {
                    "identifier": "$coeff_{L}$",
                    "text": "seq of $\\mathbb{R}$"
                },
                {
                    "identifier": "$coeff_{R}$",
                    "text": "seq of $\\mathbb{R}$"
                }
            ],
            "stateInvariants": [
                "$|lhs|=|coeff_{L}|$",
                "$|rhs|=|coeff_{R}|$",
                "$\\text{pos}(coeff_{L})$",
                "$\\text{pos}(coeff_{R})$"
            ],
            "assumptions": [],
            "accessRoutines": [
                {
                    "name": "new ReactionT(L, R)",
                    "transition": "lhs, rhs, coeff_{L}, coeff_{R} := L, R, coeff_{L}^{*}, coeff_{R}^{*}\\text{such that is\\_balanced }(L, R, coeff_{L}^{*}, coeff_{R}^{*})",
                    "output": "out := self",
                    "exception": "\\lnot((\\exists coeff_{L}^{*},coeff_{R}^{*}:seq of \\mathbb{R}|:\\text{is\\_balanced}(L, R, coeff_{L}^{*}, coeff_{R}^{*}))\\land\\text{pos}(coeff_{L}^{*})\\land\\text{pos}(coeff_{R}^{*}))\\Rightarrow \\text{ValueError}"
                },
                {
                    "name": "get\\_lhs()",
                    "transition": "",
                    "output": "out := lhs",
                    "exception": "none"
                },
                {
                    "name": "get\\_rhs()",
                    "transition": "",
                    "output": "out := rhs",
                    "exception": "none"
                },
                {
                    "name": "get\\_lhs\\_coeff()",
                    "transition": "",
                    "output": "out := coeff_{L}^{*}",
                    "exception": "none"
                },
                {
                    "name": "get\\_rhs\\_coeff()",
                    "transition": "",
                    "output": "out := coeff_{R}^{*}",
                    "exception": "none"
                }
            ]
        },
        "localFunctions": [
            {
                "signature": "$\\text{pos}:\\text{seq of }\\mathbb{R}\\rightarrow\\mathbb{B}$",
                "definition": "$\\text{pos}(s)\\equiv(\\forall i:\\mathbb{N} |i\\in [0..|s|-1]:s[i]>0)$"
            },
            {
                "signature": "$\\text{n\\_atoms}:\\text{seq of CompoundT}\\times \\text{seq of }\\mathbb{R}\\times\\text{ElementT}\\rightarrow\\mathbb{N}$",
                "definition": "$\\text{n\\_atoms}(C, c, e)\\equiv(+i:\\mathbb{N} |i\\in [0..|C|-1]:c[i]*C[i].\\text{num\\_atoms}(e))$"
            },
            {
                "signature": "$\\text{elem\\_in\\_chem\\_eq}:\\text{seq of CompoundT}\\rightarrow\\text{set of ElementT}$",
                "definition": "$\\text{n\\_atoms}(C, c, e)\\equiv(\\cup e:\\text{CompoundT}|c\\in C:c.\\text{constit\\_elems}())$"
            },
            {
                "signature": "$\\text{is\\_bal\\_elm}:\\text{seq of CompoundT}\\times \\text{seq of CompoundT}\\times\\text{seq of }\\mathbb{R}\\times\\text{seq of }\\mathbb{R}\\times\\text{ElementT}\\rightarrow\\mathbb{B}$",
                "definition": "$\\text{is\\_bal\\_elm}(L, R, c_{L}, c_{R}, e)\\equiv\\text{n\\_atoms}(L, c_{L}, e)=\\text{n\\_atoms}(R, C_{R}, e)$"
            },
            {
                "signature": "$\\text{is\\_balanced}:\\text{seq of CompoundT}\\times \\text{seq of CompoundT}\\times\\text{seq of R}\\times{seq of R}\\rightarrow\\mathbb{B}$",
                "definition": "$\\text{n\\_atoms}(C, c, e)\\equiv(\\text{elm\\_in\\_chem\\_eq}(L)=\\text{elm\\_in\\_chem\\_eq}(R))\\land(\\forall e:\\text{ElementT}|e\\in\\text{elm\\_in\\_chem\\_eq}(L):\\text{is\\_bal\\_elm}(L, R, c_{L}, c_{R}, e))$"
            }
        ],
        "considerations": "Usually when balancing equations the assumption is that the balanced equation will have positive integer coefficients.  The requirements here are not that strict.  As long as the equation is balanced, positive real coefficients are fine.  Algorithms for balancing a chemical equation are based on building a linear system of equations, as described at \\url{https://www.nyu.edu/classes/tuckerman/adv.chem/lectures/lecture_2/node3.html} and \\url{https://www.nayuki.io/page/chemical-equation-balancer-javascript}."
    }
]
